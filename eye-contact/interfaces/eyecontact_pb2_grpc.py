# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import eyecontact_pb2 as eyecontact__pb2


class MaxineEyeContactServiceStub(object):
    """The MaxineEyeContactService provides APIs to run the
    Maxine Eye Contact feature.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RedirectGaze = channel.stream_stream(
                '/nvidia.maxine.eyecontact.v1.MaxineEyeContactService/RedirectGaze',
                request_serializer=eyecontact__pb2.RedirectGazeRequest.SerializeToString,
                response_deserializer=eyecontact__pb2.RedirectGazeResponse.FromString,
                )


class MaxineEyeContactServiceServicer(object):
    """The MaxineEyeContactService provides APIs to run the
    Maxine Eye Contact feature.
    """

    def RedirectGaze(self, request_iterator, context):
        """RedirectGaze is a bidirectional streaming API to run the
        Maxine Eye Contact feature on mp4 video files.

        The input message can contain GazeRedirectionConfig or bytes.
        In the beginning of the stream, a request with GazeRedirectionConfig may
        be sent to the server to set the feature's parameter.
        The server will echo back a response with the config to signify that the
        parameters were properly set. If not configured, default values will be
        used for the feature's parameters. Any GazeRedirectionConfig sent during
        the middle of the stream will be ignored.

        After the optional configuration, the client streams the input mp4 file in
        chunks in the input message and receives the output mp4 file in chunks in
        the output message.

        The client should only pass one video file per API invocation and the
        configuration, if set, is applied to only that invocation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MaxineEyeContactServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RedirectGaze': grpc.stream_stream_rpc_method_handler(
                    servicer.RedirectGaze,
                    request_deserializer=eyecontact__pb2.RedirectGazeRequest.FromString,
                    response_serializer=eyecontact__pb2.RedirectGazeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nvidia.maxine.eyecontact.v1.MaxineEyeContactService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MaxineEyeContactService(object):
    """The MaxineEyeContactService provides APIs to run the
    Maxine Eye Contact feature.
    """

    @staticmethod
    def RedirectGaze(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/nvidia.maxine.eyecontact.v1.MaxineEyeContactService/RedirectGaze',
            eyecontact__pb2.RedirectGazeRequest.SerializeToString,
            eyecontact__pb2.RedirectGazeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
